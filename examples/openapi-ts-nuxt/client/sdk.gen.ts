// This file is auto-generated by @hey-api/openapi-ts

import type { Composable, Options } from '@hey-api/client-nuxt';

import { client as _heyApiClient } from './client.gen';
import {
  addPetResponseTransformer,
  createUserResponseTransformer,
  findPetsByStatusResponseTransformer,
  findPetsByTagsResponseTransformer,
  getOrderByIdResponseTransformer,
  getPetByIdResponseTransformer,
  getUserByNameResponseTransformer,
  placeOrderResponseTransformer,
  updatePetResponseTransformer,
} from './transformers.gen';
import type {
  AddPetData,
  AddPetResponse,
  CreateUserData,
  CreateUserResponse,
  CreateUsersWithListInputData,
  CreateUsersWithListInputResponse,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByStatusResponse,
  FindPetsByTagsData,
  FindPetsByTagsResponse,
  GetInventoryData,
  GetInventoryResponse,
  GetOrderByIdData,
  GetOrderByIdResponse,
  GetPetByIdData,
  GetPetByIdResponse,
  GetUserByNameData,
  GetUserByNameResponse,
  LoginUserData,
  LoginUserResponse,
  LogoutUserData,
  PlaceOrderData,
  PlaceOrderResponse,
  UpdatePetData,
  UpdatePetResponse,
  UpdatePetWithFormData,
  UpdateUserData,
  UploadFileData,
  UploadFileResponse,
} from './types.gen';
import {
  zAddPetResponse,
  zCreateUserResponse,
  zCreateUsersWithListInputResponse,
  zFindPetsByStatusResponse,
  zFindPetsByTagsResponse,
  zGetInventoryResponse,
  zGetOrderByIdResponse,
  zGetPetByIdResponse,
  zGetUserByNameResponse,
  zLoginUserResponse,
  zPlaceOrderResponse,
  zUpdatePetResponse,
  zUploadFileResponse,
} from './zod.gen';

/**
 * Add a new pet to the store
 * Add a new pet to the store
 */
export const addPet = <TComposable extends Composable>(
  options: Options<TComposable, AddPetData>,
) =>
  (options?.client ?? _heyApiClient).post<TComposable, AddPetResponse, unknown>(
    {
      responseTransformer: addPetResponseTransformer,
      responseValidator: async (data) => await zAddPetResponse.parseAsync(data),
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/pet',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    },
  );

/**
 * Update an existing pet
 * Update an existing pet by Id
 */
export const updatePet = <TComposable extends Composable>(
  options: Options<TComposable, UpdatePetData>,
) =>
  (options?.client ?? _heyApiClient).put<
    TComposable,
    UpdatePetResponse,
    unknown
  >({
    responseTransformer: updatePetResponseTransformer,
    responseValidator: async (data) =>
      await zUpdatePetResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export const findPetsByStatus = <TComposable extends Composable>(
  options: Options<TComposable, FindPetsByStatusData>,
) =>
  (options?.client ?? _heyApiClient).get<
    TComposable,
    FindPetsByStatusResponse,
    unknown
  >({
    responseTransformer: findPetsByStatusResponseTransformer,
    responseValidator: async (data) =>
      await zFindPetsByStatusResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/findByStatus',
    ...options,
  });

/**
 * Finds Pets by tags
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags = <TComposable extends Composable>(
  options: Options<TComposable, FindPetsByTagsData>,
) =>
  (options?.client ?? _heyApiClient).get<
    TComposable,
    FindPetsByTagsResponse,
    unknown
  >({
    responseTransformer: findPetsByTagsResponseTransformer,
    responseValidator: async (data) =>
      await zFindPetsByTagsResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/findByTags',
    ...options,
  });

/**
 * Deletes a pet
 */
export const deletePet = <TComposable extends Composable>(
  options: Options<TComposable, DeletePetData>,
) =>
  (options?.client ?? _heyApiClient).delete<TComposable, unknown, unknown>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Find pet by ID
 * Returns a single pet
 */
export const getPetById = <TComposable extends Composable>(
  options: Options<TComposable, GetPetByIdData>,
) =>
  (options?.client ?? _heyApiClient).get<
    TComposable,
    GetPetByIdResponse,
    unknown
  >({
    responseTransformer: getPetByIdResponseTransformer,
    responseValidator: async (data) =>
      await zGetPetByIdResponse.parseAsync(data),
    security: [
      {
        name: 'api_key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Updates a pet in the store with form data
 */
export const updatePetWithForm = <TComposable extends Composable>(
  options: Options<TComposable, UpdatePetWithFormData>,
) =>
  (options?.client ?? _heyApiClient).post<TComposable, unknown, unknown>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}',
    ...options,
  });

/**
 * uploads an image
 */
export const uploadFile = <TComposable extends Composable>(
  options: Options<TComposable, UploadFileData>,
) =>
  (options?.client ?? _heyApiClient).post<
    TComposable,
    UploadFileResponse,
    unknown
  >({
    responseValidator: async (data) =>
      await zUploadFileResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}/uploadImage',
    ...options,
    headers: {
      'Content-Type': 'application/octet-stream',
      ...options?.headers,
    },
  });

/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export const getInventory = <TComposable extends Composable>(
  options: Options<TComposable, GetInventoryData>,
) =>
  (options?.client ?? _heyApiClient).get<
    TComposable,
    GetInventoryResponse,
    unknown
  >({
    responseValidator: async (data) =>
      await zGetInventoryResponse.parseAsync(data),
    security: [
      {
        name: 'api_key',
        type: 'apiKey',
      },
    ],
    url: '/store/inventory',
    ...options,
  });

/**
 * Place an order for a pet
 * Place a new order in the store
 */
export const placeOrder = <TComposable extends Composable>(
  options: Options<TComposable, PlaceOrderData>,
) =>
  (options?.client ?? _heyApiClient).post<
    TComposable,
    PlaceOrderResponse,
    unknown
  >({
    responseTransformer: placeOrderResponseTransformer,
    responseValidator: async (data) =>
      await zPlaceOrderResponse.parseAsync(data),
    url: '/store/order',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 */
export const deleteOrder = <TComposable extends Composable>(
  options: Options<TComposable, DeleteOrderData>,
) =>
  (options?.client ?? _heyApiClient).delete<TComposable, unknown, unknown>({
    url: '/store/order/{orderId}',
    ...options,
  });

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderById = <TComposable extends Composable>(
  options: Options<TComposable, GetOrderByIdData>,
) =>
  (options?.client ?? _heyApiClient).get<
    TComposable,
    GetOrderByIdResponse,
    unknown
  >({
    responseTransformer: getOrderByIdResponseTransformer,
    responseValidator: async (data) =>
      await zGetOrderByIdResponse.parseAsync(data),
    url: '/store/order/{orderId}',
    ...options,
  });

/**
 * Create user
 * This can only be done by the logged in user.
 */
export const createUser = <TComposable extends Composable>(
  options: Options<TComposable, CreateUserData>,
) =>
  (options?.client ?? _heyApiClient).post<
    TComposable,
    CreateUserResponse,
    unknown
  >({
    responseTransformer: createUserResponseTransformer,
    responseValidator: async (data) =>
      await zCreateUserResponse.parseAsync(data),
    url: '/user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Creates list of users with given input array
 * Creates list of users with given input array
 */
export const createUsersWithListInput = <TComposable extends Composable>(
  options: Options<TComposable, CreateUsersWithListInputData>,
) =>
  (options?.client ?? _heyApiClient).post<
    TComposable,
    CreateUsersWithListInputResponse,
    unknown
  >({
    responseValidator: async (data) =>
      await zCreateUsersWithListInputResponse.parseAsync(data),
    url: '/user/createWithList',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Logs user into the system
 */
export const loginUser = <TComposable extends Composable>(
  options: Options<TComposable, LoginUserData>,
) =>
  (options?.client ?? _heyApiClient).get<
    TComposable,
    LoginUserResponse,
    unknown
  >({
    responseValidator: async (data) =>
      await zLoginUserResponse.parseAsync(data),
    url: '/user/login',
    ...options,
  });

/**
 * Logs out current logged in user session
 */
export const logoutUser = <TComposable extends Composable>(
  options: Options<TComposable, LogoutUserData>,
) =>
  (options?.client ?? _heyApiClient).get<TComposable, unknown, unknown>({
    url: '/user/logout',
    ...options,
  });

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export const deleteUser = <TComposable extends Composable>(
  options: Options<TComposable, DeleteUserData>,
) =>
  (options?.client ?? _heyApiClient).delete<TComposable, unknown, unknown>({
    url: '/user/{username}',
    ...options,
  });

/**
 * Get user by user name
 */
export const getUserByName = <TComposable extends Composable>(
  options: Options<TComposable, GetUserByNameData>,
) =>
  (options?.client ?? _heyApiClient).get<
    TComposable,
    GetUserByNameResponse,
    unknown
  >({
    responseTransformer: getUserByNameResponseTransformer,
    responseValidator: async (data) =>
      await zGetUserByNameResponse.parseAsync(data),
    url: '/user/{username}',
    ...options,
  });

/**
 * Update user
 * This can only be done by the logged in user.
 */
export const updateUser = <TComposable extends Composable>(
  options: Options<TComposable, UpdateUserData>,
) =>
  (options?.client ?? _heyApiClient).put<TComposable, unknown, unknown>({
    url: '/user/{username}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
