{{>header}}
{{~#equals @root.$config.client 'angular'~}}
import type { HttpResponse } from '@angular/common/http';
{{~/equals~}}
{{~#equals @root.$config.client 'axios'~}}
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
{{~/equals~}}
{{~#equals @root.$config.client 'node'~}}
import type { RequestInit, Response } from 'node-fetch';
{{~/equals~}}

import type { ApiRequestOptions } from './ApiRequestOptions';
{{#if @root.$config.useOptions}}
{{#equals @root.$config.serviceResponse 'generics'}}
import type { TConfig, TResult } from './types';
{{else}}
import type { TResult } from './types';
{{/equals}}
{{else}}
import type { TResult } from './types';
{{/if}}

type Headers = Record<string, string>;
{{#equals @root.$config.client 'angular'}}
type Middleware<T> = (value: T) => T;
{{else}}
type Middleware<T> = (value: T) => T | Promise<T>;
{{/equals}}
type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;

export class Interceptors<T> {
  _fns: Middleware<T>[];

  constructor() {
    this._fns = [];
  }

  eject(fn: Middleware<T>) {
    const index = this._fns.indexOf(fn);
    if (index !== -1) {
      this._fns = [
        ...this._fns.slice(0, index),
        ...this._fns.slice(index + 1),
      ];
    }
  }

  use(fn: Middleware<T>) {
    this._fns = [...this._fns, fn];
  }
}

export type OpenAPIConfig = {
	BASE: string;
	CREDENTIALS: 'include' | 'omit' | 'same-origin';
	ENCODE_PATH?: ((path: string) => string) | undefined;
	HEADERS?: Headers | Resolver<Headers> | undefined;
	PASSWORD?: string | Resolver<string> | undefined;
	RESULT?: TResult;
	TOKEN?: string | Resolver<string> | undefined;
	USERNAME?: string | Resolver<string> | undefined;
	VERSION: string;
	WITH_CREDENTIALS: boolean;
	interceptors: {
		{{~#equals @root.$config.client 'angular'~}}
		response: Interceptors<HttpResponse<any>>;
		{{~/equals~}}
		{{~#equals @root.$config.client 'axios'~}}
		request: Interceptors<AxiosRequestConfig>;
		response: Interceptors<AxiosResponse>;
		{{~/equals~}}
		{{~#equals @root.$config.client 'fetch'~}}
		request: Interceptors<RequestInit>;
		response: Interceptors<Response>;
		{{~/equals~}}
		{{~#equals @root.$config.client 'node'~}}
		request: Interceptors<RequestInit>;
		response: Interceptors<Response>;
		{{~/equals~}}
		{{~#equals @root.$config.client 'xhr'~}}
		request: Interceptors<XMLHttpRequest>;
		response: Interceptors<XMLHttpRequest>;
		{{~/equals~}}
	};
};

export const OpenAPI: OpenAPIConfig = {
	BASE: '{{{server}}}',
	CREDENTIALS: 'include',
	ENCODE_PATH: undefined,
	HEADERS: undefined,
	PASSWORD: undefined,
	RESULT: 'body',
	TOKEN: undefined,
	USERNAME: undefined,
	VERSION: '{{{version}}}',
	WITH_CREDENTIALS: false,
	interceptors: {
		{{~#notEquals @root.$config.client 'angular'~}}
		request: new Interceptors(),
		{{~/notEquals~}}
		response: new Interceptors(),
	},
};

{{~#if @root.$config.useOptions~}}
{{~#equals @root.$config.serviceResponse 'generics'~}}
export const mergeOpenApiConfig = <T extends TResult>(config: OpenAPIConfig, overrides: TConfig<T>) => {
	const merged = { ...config };
	Object.entries(overrides)
		.filter(([key]) => key.startsWith('_'))
		.forEach(([key, value]) => {
			const k = key.slice(1).toLocaleUpperCase() as keyof typeof merged;
			if (merged.hasOwnProperty(k)) {
				// @ts-ignore
				merged[k] = value;
			}
		});
	return merged;
};
{{~/equals~}}
{{~/if~}}
