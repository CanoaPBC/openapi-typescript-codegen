// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type MutationOptions } from '@tanstack/svelte-query';
import type { ParentModelWithDatesError, ParentModelWithDatesResponse, ModelWithDatesError, ModelWithDatesResponse, ModelWithDatesArrayError, ModelWithDatesArrayResponse, ArrayOfDatesError, ArrayOfDatesResponse, DateError, DateResponse, MultipleResponsesError, MultipleResponsesResponse, PostTestData, PostTestError, PostTestResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client, parentModelWithDates, modelWithDates, modelWithDatesArray, arrayOfDates, date, multipleResponses, postTest } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const parentModelWithDatesQueryKey = (options?: Options) => [
    createQueryKey("parentModelWithDates", options)
];

export const parentModelWithDatesOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await parentModelWithDates({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: parentModelWithDatesQueryKey(options)
}); };

export const parentModelWithDatesMutation = () => { const mutationOptions: MutationOptions<ParentModelWithDatesResponse, AxiosError<ParentModelWithDatesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await parentModelWithDates({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const modelWithDatesMutation = () => { const mutationOptions: MutationOptions<ModelWithDatesResponse, AxiosError<ModelWithDatesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await modelWithDates({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const modelWithDatesArrayMutation = () => { const mutationOptions: MutationOptions<ModelWithDatesArrayResponse, AxiosError<ModelWithDatesArrayError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await modelWithDatesArray({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const arrayOfDatesMutation = () => { const mutationOptions: MutationOptions<ArrayOfDatesResponse, AxiosError<ArrayOfDatesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await arrayOfDates({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const dateMutation = () => { const mutationOptions: MutationOptions<DateResponse, AxiosError<DateError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await date({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const multipleResponsesMutation = () => { const mutationOptions: MutationOptions<MultipleResponsesResponse, AxiosError<MultipleResponsesError>, Options> = {
    mutationFn: async (options) => {
        const { data } = await multipleResponses({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const postTestQueryKey = (options?: Options<PostTestData>) => [
    createQueryKey("postTest", options)
];

export const postTestOptions = (options?: Options<PostTestData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await postTest({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: postTestQueryKey(options)
}); };

export const postTestMutation = () => { const mutationOptions: MutationOptions<PostTestResponse, AxiosError<PostTestError>, Options<PostTestData>> = {
    mutationFn: async (options) => {
        const { data } = await postTest({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };